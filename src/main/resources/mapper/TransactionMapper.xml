<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="fingertips.backend.transaction.mapper.TransactionMapper">
    <select id="getCardTransactionList" parameterType="Integer" resultType="CardTransactionDTO">
        SELECT ct.card_idx, c.bank_name, c.card_name, c.card_image, ct.card_transaction_date, ct.card_transaction_time,
               cat.category_name, ct.card_transaction_description, ct.amount
        FROM card_transaction ct
            JOIN card c ON ct.card_idx = c.card_idx
            JOIN category cat ON ct.category_idx = cat.category_idx
        WHERE c.member_idx = #{memberIdx}
            AND c.connected_status = 1
        ORDER BY card_transaction_date DESC
    </select>

    <select id="getCardTransactionListByPeriod" parameterType="PeriodDTO" resultType="CardTransactionDTO">
        SELECT cat.category_name, ct.card_transaction_description, ct.amount
        FROM card_transaction ct
            JOIN card c ON ct.card_idx = c.card_idx
            JOIN category cat ON ct.category_idx = cat.category_idx
        WHERE c.member_idx = #{memberIdx}
            AND c.connected_status = 1
            AND ct.card_transaction_date BETWEEN CONCAT(#{startYear}, '-', #{startMonth}, '-', #{startDay})
            AND CONCAT(#{endYear}, '-', #{endMonth}, '-', #{endDay});
    </select>

    <select id="getAccountTransactionList" parameterType="Integer" resultType="AccountTransactionDTO">
        SELECT a.bank_name, a.account_name, a.account_image, `at`.account_transaction_date, `at`.account_transaction_time,
               `at`.account_transaction_type, cat.category_name, `at`.account_transaction_description, `at`.amount
        FROM account_transaction `at`
            JOIN account a ON `at`.account_idx = a.account_idx
            JOIN category cat ON `at`.category_idx = cat.category_idx
        WHERE a.member_idx = #{memberIdx}
            AND a.connected_status = 1
        ORDER BY account_transaction_date DESC
    </select>

    <!-- 카테고리별 거래 건수와 총 지출 금액을 가져오는 쿼리 -->
    <!-- 카테고리별 거래 건수와 총 지출 금액을 가져오는 쿼리 -->
    <select id="getCategoryTransactionCount" parameterType="Integer" resultType="fingertips.backend.transaction.dto.CategoryTransactionCountDTO">
        SELECT
            cat.category_name AS categoryName,
            COUNT(ct.card_transaction_idx) AS transactionCount,
            CASE
                WHEN (SELECT COUNT(*) FROM card_transaction ct JOIN card c ON ct.card_idx = c.card_idx WHERE c.member_idx = #{memberIdx}) = 0
                    THEN 0
                ELSE (COUNT(ct.card_transaction_idx) /
                      (SELECT COUNT(*) FROM card_transaction ct JOIN card c ON ct.card_idx = c.card_idx WHERE c.member_idx = #{memberIdx})) * 100
                END AS percentage,
            SUM(ct.amount) AS totalSpent
        FROM card_transaction ct
                 JOIN card c ON ct.card_idx = c.card_idx
                 JOIN category cat ON ct.category_idx = cat.category_idx
        WHERE c.member_idx = #{memberIdx}
        GROUP BY cat.category_name
    </select>

    <!-- 카테고리별 총 지출 금액이 가장 큰 카테고리를 가져오는 쿼리 -->

    <select id="getMostSpentCategoryByAmount" parameterType="Integer" resultType="fingertips.backend.transaction.dto.MostSpentCategoryDTO">
        SELECT
            cat.category_name AS categoryName,
            SUM(ct.amount) AS totalSpent,
            ct.card_transaction_date AS transactionDate
        FROM card_transaction ct
                 JOIN card c ON ct.card_idx = c.card_idx
                 JOIN category cat ON ct.category_idx = cat.category_idx
        WHERE c.member_idx = #{memberIdx}
        GROUP BY cat.category_name, ct.card_transaction_date
        ORDER BY totalSpent DESC
    </select>







</mapper>
